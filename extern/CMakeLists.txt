
#Eigen: always use version 3.4
message(STATUS "Third-party: creating target 'Eigen3::Eigen'")
message(${EIGEN_BUILD_PATH})
find_package (Eigen3 3.4 REQUIRED)

set(MAGNUM_WITH_IMGUI ON CACHE BOOL "" FORCE)
set(MAGNUM_WITH_EIGEN ON CACHE BOOL "" FORCE)
if(APPLICATION_USE_GUI)
	set(MAGNUM_WITH_GLFWAPPLICATION ON CACHE BOOL "" FORCE)
else()
    set(MAGNUM_WITH_GLFWAPPLICATION OFF CACHE BOOL "" FORCE)
endif()
# set(MAGNUM_WITH_WINDOWLESSEGLAPPLICATION ON CACHE BOOL "" FORCE)
# If you want to load just basic OBJs
set(MAGNUM_WITH_ANYIMAGEIMPORTER ON CACHE BOOL "" FORCE)
set(MAGNUM_WITH_ANYSCENEIMPORTER ON CACHE BOOL "" FORCE)
set(MAGNUM_WITH_OBJIMPORTER ON CACHE BOOL "" FORCE)
# If you want to load (textured) glTF as well
set(MAGNUM_WITH_STBIMAGEIMPORTER ON CACHE BOOL "" FORCE)
set(MAGNUM_WITH_TINYGLTFIMPORTER ON CACHE BOOL "" FORCE)
set(MAGNUM_WITH_ANYSCENECONVERTER ON CACHE BOOL "" FORCE)
set(MAGNUM_WITH_GLTFSCENECONVERTER ON CACHE BOOL "" FORCE)

add_subdirectory(corrade EXCLUDE_FROM_ALL)
add_subdirectory(magnum EXCLUDE_FROM_ALL)
if(APPLICATION_USE_GUI)
	find_package(Magnum REQUIRED GL MeshTools Shaders SceneGraph Trade GlfwApplication)
else()
    find_package(Magnum REQUIRED GL MeshTools Shaders SceneGraph Trade)
endif()
add_subdirectory(magnum-plugins EXCLUDE_FROM_ALL)
set(CORRADE_WITH_RC OFF CACHE BOOL "" FORCE)

set(ImGui_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/imgui" CACHE PATH "" FORCE)
set(imgui_DIR "${CMAKE_CURRENT_SOURCE_DIR}/imgui" CACHE PATH "" FORCE)
set(ImGui_imgui_SOURCE "${ImGui_INCLUDE_DIR}/imgui.cpp" CACHE FILEPATH "" FORCE)
set(ImGui_imgui_widgets_SOURCE "${ImGui_INCLUDE_DIR}/imgui_widgets.cpp" CACHE FILEPATH "" FORCE)
set(ImGui_imgui_draw_SOURCE "${ImGui_INCLUDE_DIR}/imgui_draw.cpp" CACHE FILEPATH "" FORCE)
set(ImGui_imgui_demo_SOURCE "${ImGui_INCLUDE_DIR}/imgui_demo.cpp" CACHE FILEPATH "" FORCE)
set(ImGui_imgui_tables_SOURCE "${ImGui_INCLUDE_DIR}/imgui_tables.cpp" CACHE FILEPATH "" FORCE)
find_package(ImGui REQUIRED)

set(MAGNUM_WITH_EIGEN ON CACHE BOOL "" FORCE)
add_subdirectory(magnum-integration EXCLUDE_FROM_ALL)
find_package(MagnumIntegration REQUIRED ImGui Eigen)

add_library(ImGuiFileDialog
 ${CMAKE_CURRENT_SOURCE_DIR}/ImGuiFileDialog/ImGuiFileDialog.h
 ${ImGui_INCLUDE_DIR}/imgui.h
 ${CMAKE_CURRENT_SOURCE_DIR}/ImGuiFileDialog/ImGuiFileDialog.cpp
 ${CMAKE_CURRENT_SOURCE_DIR}/ImGuiFileDialog/ImGuiFileDialogConfig.h
 )
target_include_directories(ImGuiFileDialog PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/imgui)

add_library(ImGuizmo
 ${CMAKE_CURRENT_SOURCE_DIR}/ImGuizmo/ImGuizmo.h
 ${ImGui_INCLUDE_DIR}/imgui.h
 ${CMAKE_CURRENT_SOURCE_DIR}/ImGuizmo/ImGuizmo.cpp
 )
target_include_directories(ImGuizmo PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/imgui)

add_subdirectory(yaml-cpp)
set(YAML_CPP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(YAML_CPP_BUILD_TOOLS OFF CACHE BOOL "" FORCE)

find_package(OpenMP)

include(ExternalProject)
MESSAGE(${CMAKE_BINARY_DIR})
MESSAGE(${CMAKE_CURRENT_BINARY_DIR})
set(CCD_INSTALL_PREFIX ${CCD_BUILD_PATH})
ExternalProject_Add(ccd 
    PREFIX ${CCD_BUILD_PATH}
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libccd
    CMAKE_ARGS
     -DCMAKE_INSTALL_PREFIX:PATH=${CCD_BUILD_PATH}
     -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
     -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
     -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
     -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON
     -DBUILD_TESTING=OFF
)
if(BUILD_NIX_PACKAGE)
    set(CCD_LIBRARY ${CCD_BUILD_PATH}/lib64/libccd.so CACHE FILEPATH "" FORCE)
else()
    set(CCD_LIBRARY ${CCD_BUILD_PATH}/lib/libccd.so CACHE FILEPATH "" FORCE)
endif()

set(FCL_INSTALL_PREFIX ${FCL_BUILD_PATH})
ExternalProject_Add(fcl
    PREFIX ${FCL_INSTALL_PREFIX}
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/fcl
    CMAKE_ARGS
     -DCCD_INCLUDE_DIR:PATH=${CCD_BUILD_PATH}/include
     -DCCD_LIBRARY:FILEPATH=${CCD_LIBRARY}
     -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
     -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
     -DCMAKE_INSTALL_PREFIX:PATH=${FCL_BUILD_PATH}
     -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
     -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON
     -DBUILD_TESTING=OFF
)
add_dependencies(fcl ccd)
if(BUILD_NIX_PACKAGE)
    set(FCL_LIBRARY ${FCL_BUILD_PATH}/lib64/libfcl.so CACHE FILEPATH "" FORCE)
else()
    set(FCL_LIBRARY ${FCL_BUILD_PATH}/lib/libfcl.so CACHE FILEPATH "" FORCE)
endif()
#set(HPP_FCL_INSTALL_PREFIX ${HPP_FCL_BUILD_PATH})
#ExternalProject_Add(hpp-fcl
#    PREFIX ${HPP_FCL_INSTALL_PREFIX}
#    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/hpp-fcl
#    CMAKE_ARGS
#     -DCMAKE_INSTALL_PREFIX:PATH=${HPP_FCL_BUILD_PATH}
#     -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
#     -DBUILD_PYTHON_INTERFACE=OFF
#)
#set(HPP_FCL_LIBRARY ${HPP_FCL_BUILD_PATH}/lib/libfcl.so CACHE FILEPATH "" FORCE)
# include_directories(${FCL_INSTALL_PREFIX}/fcl/include)

# message(${EIGEN_BUILD_PATH})
# ExternalProject_Add(eigen
#     PREFIX ${FCL_INSTALL_PREFIX}
#     SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/eigen
#     CMAKE_ARGS
#      -DCMAKE_INSTALL_PREFIX:PATH=${EIGEN_BUILD_PATH}
#      -DINCLUDE_INSTALL_DIR:PATH=${EIGEN_BUILD_PATH}
#      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
# )

add_subdirectory(amgcl)

add_subdirectory(cnpy)
